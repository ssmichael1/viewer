import { Button, VerticalBox, HorizontalBox, ComboBox, GridBox, Palette, Slider } from "std-widgets.slint";
import {ToggleSwitch} from "toggleswitch.slint";
import {PlotBox} from "plotter.slint";
import {Shared} from "shared.slint"; 


component GroupBox {
    in-out property <string> title: "GroupBox";
    in-out property <int> font-size: 14;
    in-out property <int> font-weight: 600;
    i-background := Rectangle {
        border-width: 1px;
        border-radius: 6px;
        border-color: #555;
        drop-shadow-blur: 4px;
        drop-shadow-color: #333;
        background: Palette.background;
    }

    padding: 4px;
    Rectangle {
        width: titleh.width + 12px;
        height: 4px;
        x: 16px;
        y: -2px;
        background: Palette.background;
    }

    titleh := Text {
        text: title;
        font-size: font-size * 1px;
        font-weight: font-weight;
        y: font-size / 2 * -1px;
        x: 20px;
        color: #555;
    }

    content := VerticalBox {
        spacing: 6px;
        padding: 8px;
        @children
    }
}

component LabelText inherits Text {
    in-out property <bool> enabled: true;

    font-size: 14px;
    horizontal-alignment: right;
    vertical-alignment: center;
    font-weight: 400;
    color: enabled == true ? #333 : #aaa;
    padding-right: 16px;
    width: 120px;
    vertical-stretch: 0;
    max-height: 20px;
}

component ValueText {

    in-out property <string> text;
    padding: 8px;
    text <=> th.text;

    max-width: 100px;
    i-background := Rectangle {
        border-width: 2px;
        border-radius: 4px;
        border-color: #333;
        background: #ddd;
    }

    HorizontalLayout {
        padding-left: 12pt;
        padding-top: 4px;
        padding-bottom: 4px;
        th := Text {
            font-family: "Courier";
            font-size: 14px;
            horizontal-alignment: left;
            vertical-alignment: center;
            font-weight: 400;
            color: #333;
            vertical-stretch: 0;
        }
    }
}

export component AppWindow inherits Window {
    title: "Camera Viewer";
    min-height: 600px;
    min-width: 800px;
    preferred-height: 800px;
    preferred-width: 1200px;

    in-out property <image> camframe;
    in property <image> colormap_image;
    in-out property <int> camframe_width: 512;
    in-out property <int> camframe_height: 512;
    in-out property <string> meantext: " ";
    in-out property <string> vartext: " ";
    in-out property <[color]> colors;

    property <bool> show_colorbar: true;
    property <bool> show-axes: true;
    in-out property <int> xpix: 0;
    in-out property <int> ypix: 0;
    in-out property <int> valatpix: 0;

    HorizontalBox {
        y: 24px;
        spacing: 12px;
        padding-bottom: 24px;
        padding-top: 20px;
        padding-left: 16px;
        padding-right: 16px;
        height: parent.height - 48px;

        VerticalBox {
            padding: 0px;
            spacing: 16px;
            min-height: 1200px;

            GroupBox {
                title: "Display Settings";
                padding: 8px;
                width: 400px;

                GridLayout {
                    padding: 16px;
                    spacing-horizontal: 16px;
                    spacing-vertical: 12px;
                    Row {
                        LabelText {
                            text: "Colormap";
                        }

                        ComboBox {
                            max-height: 30px;
                            width: 200px;
                            model: ["Parula", "Grayscale", "Hot", "Red"];
                            selected(value) => {
                                Shared.colormap = value;
                                Shared.view-changed();
                            }
                        }
                    }

                    Row {
                        LabelText {
                            text: "Gamma";
                        }

                        HorizontalLayout {
                            spacing: 16px;
                            Slider {
                                preferred-height: 30px;
                                width: 120px;
                                minimum: -1.0;
                                maximum: 1.0;
                                step: 0.01;
                                value: Math.log(Shared.gamma, 10.0);
                                changed(value) => {
                                    Shared.gamma = Math.pow(10.0, value);
                                    Shared.view-changed();
                                }
                            }

                            ValueText {
                                width: 6rem;
                                text: (Shared.gamma * 100.0).round() / 100.0;
                            }
                        }
                    }

                    Row {
                        LabelText {
                            text: "Auto Color Scale";
                        }

                        ToggleSwitch {
                            checked: Shared.autoscale;
                            toggled(value) => {
                                Shared.autoscale = value;
                                Shared.view-changed();
                            }
                        }
                    }

                    Row {
                        LabelText {
                            text: "Manual Range";
                            enabled: !Shared.autoscale;
                        }

                        ToggleSwitch {
                            checked <=> Shared.manualfc;
                            enabled: !Shared.autoscale;
                            toggled(value) => {
                                Shared.manualfc_min = Shared.histxrange.min;
                                Shared.manualfc_max = Shared.histxrange.max;
                                debug(Shared.manualfc_min, Shared.manualfc_max);
                                Shared.manualfc = value;
                                Shared.view-changed();
                            }
                        }
                    }

                    Row {

                        LabelText {
                            text: "Show Axes";
                        }

                        ToggleSwitch {
                            checked: show-axes;
                            toggled(value) => {
                                show-axes = value;
                            }
                        }
                    }

                    Row {
                        LabelText {
                            text: "Show Colorbar";
                        }

                        ToggleSwitch {
                            checked: show_colorbar;
                            toggled(value) => {
                                show_colorbar = value;
                            }
                        }
                    }
                }
            } // end of groupbox display settings

            GroupBox {
                title: "Frame Statistics";
                padding: 8px;

                GridLayout {
                    padding: 16px;
                    spacing-horizontal: 12px;
                    spacing-vertical: 12px;
                    vertical-stretch: 0.3;
                    Row {
                        LabelText {
                            text: "Frame Rate";
                        }

                        ValueText {
                            width: 18rem;
                            text: "42.0 fps";
                        }
                    }

                    Row {
                        LabelText {
                            text: "Mouseover Pixel";
                        }

                        ValueText {
                            width: 18rem;
                            text: Shared.mouseover_string(root.xpix, root.ypix, root.valatpix);
                        }
                    }

                    Row {
                        LabelText {
                            text: "Frame Mean";
                        }

                        ValueText {
                            text: root.meantext;
                        }
                    }

                    Row {
                        LabelText {
                            text: "Frame 1-Sigma";
                        }

                        ValueText {
                            text: root.vartext;
                        }
                    }
                }
            } // end of groupbox frame statistics

            GroupBox {
                title: "Histogram";
                PlotBox {
                    padding-top: 24px;
                    min-height: 256px;
                    x-label: "Pixel Value";
                    y-label: "Frequency";
                }
            }
        } // end of vertical box

        framebox_handle := GroupBox {
            title: "Camera Frame";
            padding: 24px;
            property <length> colorbar_width: 5rem + 20px;
            property <length> yaxis_width: 8rem;
            property <length> xaxis_height: 40px;
            height: 100%;

            Rectangle {
                height: 100%;

                // Some computations on positions...
                property <length> top-pad: 12px;
                property <length> available_width: self.width - (show_colorbar ? colorbar_width : 0) - (show-axes ? yaxis_width : 0);
                property <length> available_height: self.height - (show-axes ? xaxis_height : 0) - top-pad;
                property <float> available_aspect_ratio: available_width / available_height;
                property <float> cam_aspect-ratio: camframe_width / camframe_height;
                property <length> image_display_width: available_aspect_ratio > cam_aspect-ratio ? cam_aspect-ratio * available_height : available_width;
                property <length> image_display_height: available_aspect_ratio > cam_aspect-ratio ? available_height : available_width / cam_aspect-ratio;
                property <length> image_display_xoffset: (available_width - image_display_width - (show-axes ? yaxis_width : 0)) / 2 + (show-axes ? yaxis_width : 0);
                property <length> image_display_yoffset: (available_height - image_display_height) / 2 + top-pad;
                

                // The image
                imh := Rectangle {
                    width: image_display_width;
                    height: image_display_height;
                    x: image_display_xoffset;
                    y: image_display_yoffset;
                    Image {
                        source: Shared.displayimage(image_display_width, image_display_height);
                        x: 0;
                        y: 0;
                        width: image_display_width;
                        height: image_display_height;
                        image-fit: cover;
                        image-rendering: pixelated;
                    }
                }

                // The overlay
                overlay_handle := Rectangle {
                    width: image_display_width;
                    height: image_display_height;
                    x: image_display_xoffset;
                    y: image_display_yoffset;
                    background: transparent;
                    border-width: 1.0px;
                    border-color: #333;

                    property <{x: length, y: length}> mousedown: { x: -1px, y: -1px };
                    property <{x: int, y: int, width: int, height: int}> selection <=> Shared.roi;

                    if (selection.width > 0 && selection.height > 0): Rectangle {
                        x: selection.x / camframe_width * image_display_width;
                        y: selection.y / camframe_height * image_display_height;
                        width: selection.width / camframe_width * image_display_width;
                        height: selection.height / camframe_height * image_display_height;
                        border-width: 1px;
                        border-color: yellow;
                        border-radius: 2px;
                        background: transparent;
                    }

                    TouchArea {

                        width: 100%;
                        height: 100%;
                        x: 0;
                        y: 0;
                        pointer-event(event) => {
                            if (event.kind == PointerEventKind.move) {
                                xpix = Math.floor(self.mouse-x / self.width * camframe_width);
                                ypix = Math.floor(self.mouse-y / self.height * camframe_height);

                                if (mousedown.x >= 0 && mousedown.y >= 0 && self.pressed) {
                                    if (Math.abs(mousedown.x - self.mouse-x) > 2px && Math.abs(mousedown.y - self.mouse-y) > 2px) {
                                        selection = {
                                            x: Math.min(mousedown.x, self.mouse-x) * camframe_width / image_display_width,
                                            y: Math.min(mousedown.y, self.mouse-y) * camframe_height / image_display_height,
                                            width: Math.abs(mousedown.x - self.mouse-x) * camframe_width / image_display_width,
                                            height: Math.abs(mousedown.y - self.mouse-y) * camframe_height / image_display_height
                                        };
                                    }
                                }
                            }
                            if (event.kind == PointerEventKind.down) {
                                if (event.button == PointerEventButton.left) {
                                    mousedown = { x: self.mouse-x, y: self.mouse-y };
                                    selection = { x: 0, y: 0, width: 0, height: 0 };
                                }
                            }
                            if (event.kind == PointerEventKind.up) {
                                if (event.button == PointerEventButton.left) {
                                    mousedown = { x: -1px, y: -1px };
                                    if (selection.width < 2 || selection.height < 2) {
                                        selection = { x: 0, y: 0, width: 0, height: 0 };
                                    } else {
                                    }
                                    Shared.view_changed();
                                }
                            }
                        }
                    }
                }

                if show-axes: xax := Rectangle {
                    width: image_display_width;
                    height: xaxis_height;
                    x: image_display_xoffset;
                    y: image_display_yoffset + image_display_height - 8px;

                        // Draw x axis tick marks
                        for i in 9: Path {
                        width: 2px;
                        height: 16px;
                        x: i * image_display_width / 8 - 1px;
                        y: 0px;
                        stroke-width: 1px;
                        stroke: #333;
                        MoveTo {
                            x: 0;
                            y: 0;
                        }

                        LineTo {
                            x: 0;
                            y: 100;
                        }
                    }
                        // Draw x axis labels
                        for i in 9: Rectangle {
                        x: i * image_display_width / 8 - th.width / 2;
                        y: 16px;
                        th := Text {
                            text: Math.round(i * camframe_width / 8);
                            x: 0;
                            y: 0;
                            font-size: 14px;
                            color: #333;
                        }
                    }
                } // end of x axis


                if show-axes: yax := Rectangle {
                    width: image_display_xoffset + 4px;
                    height: image_display_height;
                    x: 0;
                    y: image_display_yoffset;

                        // Draw y axis tick marks
                    for i in 9: Path {
                        width: 12px;
                        height: 2px;
                        x: image_display_xoffset - 8px;
                        y: i * image_display_height / 8 - 1px;
                        stroke-width: 1px;
                        stroke: #333;
                        MoveTo {
                            x: 0;
                            y: 0;
                        }

                        LineTo {
                            x: 100;
                            y: 0;
                        }
                    }
                        // Draw y axis labels
                    for i in 9: Rectangle {
                        x: image_display_xoffset - thy.width - 12px;
                        y: i * image_display_height / 8 - thy.height / 2;
                        thy := Text {
                            text: Math.round(i * camframe_height / 8);
                            x: 0;
                            y: 0;
                            font-size: 14px;
                            color: #333;
                            horizontal-alignment: right;
                        }
                    }
                }

                if (show_colorbar): Rectangle {
                    width: colorbar_width;
                    height: image_display_height;
                    x: image_display_width + image_display_xoffset + 20px;
                    y: image_display_yoffset;
                    property <int> ncmap_ticks: 9;

                    Image {
                        i-background := Rectangle {
                            border-width: 1.2px;
                            border-radius: 2px;
                            border-color: #555;
                        }

                        source: colormap_image;
                        x: 0px;
                        y: 0px;
                        width: 20px;
                        height: 100%;
                        image-fit: fill;
                        image-rendering: pixelated;
                    }

                    for c[i] in 9: Path {
                        stroke-width: 1px;
                        stroke: #333;
                        x: 16px;
                        y: i * parent.height / 8;
                        width: 8px;
                        height: 0px;
                        MoveTo {
                            x: 0;
                            y: 0;
                        }

                        LineTo {
                            x: 100;
                            y: 0;
                        }
                    }
                    for c[i] in ncmap_ticks: Text {
                        text: Math.round((ncmap_ticks - i - 1) / (ncmap_ticks - 1) * (Shared.fcrange.max - Shared.fcrange.min) + Shared.fcrange.min);
                        font-size: 12px;
                        x: 26px;
                        y: i * parent.height / (ncmap_ticks - 1) - 6px;
                        color: #333;
                    }
                }
            }
        }
    } // main horizontal box
} // main window

