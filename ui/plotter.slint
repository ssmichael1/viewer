
import {Shared} from "shared.slint";

component VertBar inherits Rectangle {
    x: 0;
    y: 0;
    width: 1.25rem;
    height: 100%;

    Path {
        x: parent.width / 2 - self.width / 2;

        width: 2px;
        height: 100%;
        stroke: #333;
        stroke-width: 2px;
        MoveTo {
            x: 0;
            y: 0;
        }

        LineTo {
            x: 0;
            y: 100;
        }
    }

    Path {
        // Semicircle at top
        padding: 0;
        width: parent.width;
        height: 1rem;
        x: 0;
        y: 0rem;
        stroke: #333;
        stroke-width: 2px;
        fill: green;
        MoveTo {
            x: 0;
            y: 0;
        }

        ArcTo {
            x-rotation: 180;
            x: 100;
            y: 0;
            radius-x: 50;
            radius-y: 50;
            large-arc: true;
            sweep: false;
        }

        LineTo {
            x: 0;
            y: 0;
        }
    }

    Path {
        // Semicircle at bottom
        padding: 0;
        width: parent.width;
        height: 1rem;
        x: 0;
        y: parent.height - 0.8rem;
        stroke: #333;
        stroke-width: 2px;
        fill: green;
        MoveTo {
            x: 0;
            y: 0;
        }

        ArcTo {
            x-rotation: 180;
            x: 100;
            y: 0;
            radius-x: 50;
            radius-y: 50;
            large-arc: true;
            sweep: true;
        }
    }
}

component XAxis inherits Rectangle {
    in-out property <length> labelfontsize: 12px;
    in-out property <length> tickfontsize: 10px;
    in-out property <string> label: "xlabel";
    in-out property <{min: float, max: float}> range: { min: 0, max: 1 };
    in-out property <int> numticks: 5;
    height: 40px + th.height;

    th := Text {
        text: label;
        font-size: labelfontsize;
        y: parent.height - th.height - 8px;
    }

    for i in self.numticks: Path {
        width: 2px;
        height: 12px;
        x: i * parent.width / (parent.numticks - 1);
        y: - 4px;
        stroke-width: 1px;
        stroke: #333;
        MoveTo {
            x: 0;
            y: 0;
        }

        LineTo {
            x: 0;
            y: 100;
        }
    }
    for i in self.numticks: Rectangle {
        x: i * parent.width / (parent.numticks - 1) - thx.width / 2;
        y: thx.height;
        thx := Text {
            text: range.min + (i * (range.max - range.min) / (numticks - 1));
            font-size: tickfontsize;
            x: 0;
            y: 0;
            color: #333;
            horizontal-alignment: center;
        }
    }
}

component YAxis inherits Rectangle {
    in-out property <length> labelfontsize: 12px;
    in-out property <length> tickfontsize: 10px;
    in-out property <string> label: "ylabel";
    in-out property <{min: float, max: float}> range: { min: 0, max: 1 };
    in-out property <int> numticks: 5;
    width: 40px + tw.height;
    property <length> maxtickwidth: 0;

    tw := Text {
        text: label;
        font-size: labelfontsize;
        x: 4px + tw.height / 2;
        y: (parent.height) / 2;
        rotation-angle: -90deg;
        rotation-origin-x: 0;
        rotation-origin-y: tw.height / 2;
    }

    for i in self.numticks: Path {
        width: 12px;
        height: 2px;
        x: parent.width - 4px;
        y: i * parent.height / (parent.numticks - 1);
        stroke-width: 1px;
        stroke: #333;
        MoveTo {
            x: 0;
            y: 0;
        }

        LineTo {
            x: 100;
            y: 0;
        }
    }

    for i in self.numticks: Rectangle {
        x: parent.width - thy.width - 4px;
        y: i * parent.height / (parent.numticks - 1) - thy.height / 2;
        thy := Text {
            text: range.max - (i * (range.max - range.min) / (numticks - 1) + range.min);
            font-size: tickfontsize;
            x: 0;
            y: 0;
            color: #333;
            horizontal-alignment: right;
        }
    }
}

export component PlotArea inherits Rectangle {
    in-out property <[{linecolor: color, linewidth: length, points: [{x: float, y: float}]}]> linedata: [];
    in-out property <{min: float, max: float}> x-range: { min: 0, max: 1 };
    in-out property <{min: float, max: float}> y-range: { min: 0, max: 1 };
    padding: 0px;

    i-background := Rectangle {
        x: 0;
        y: 0;
        width: parent.width;
        height: parent.height;
        border-color: black;
        border-width: 2px;
    }

    for line in linedata: Path {
        width: parent.width;
        height: parent.height;
        viewbox-width: 100;
        viewbox-height: 100 * parent.height / parent.width;
        stroke: line.linecolor;
        stroke-width: line.linewidth;
        commands: Shared.linetosvg(line.points, x-range, y-range, parent.height / parent.width);
    }
}

export component DragArea inherits Rectangle {
    vbmin := VertBar {
        x: parent.width / 2 - self.width / 2;
        y: 0;
    }

    vbmax := VertBar {
        x: parent.width - self.width / 2;
        y: 0;
    }
}

export component PlotBox inherits Rectangle {
    in-out property <length> labelfontsize: 1.2rem;
    in-out property <length> tickfontsize: 1rem;
    in-out property <string> x-label: "xlabel";
    in-out property <string> y-label: "ylabel";

    i-background := Rectangle {
        x: 0;
        y: 0;
        width: parent.width;
        height: parent.height;
        background: white;
    }

    xaxh := XAxis {
        label <=> root.x-label;
        range <=> Shared.histxrange;
        labelfontsize <=> root.labelfontsize;
        tickfontsize <=> root.tickfontsize;
        x: yaxh.width;
        y: parent.height - xaxh.height;
        width: parent.width - yaxh.width - 16px;
    }

    yaxh := YAxis {
        label <=> root.y-label;
        range <=> Shared.histyrange;
        labelfontsize <=> root.labelfontsize;
        tickfontsize <=> root.tickfontsize;
        x: 0;
        y: 15px;
        height: parent.height - xaxh.height - 16px;
    }

    plotarea := PlotArea {
        x: yaxh.x + yaxh.width;
        y: yaxh.y;
        width: xaxh.width;
        height: yaxh.height;
        x-range <=> Shared.histxrange;
        y-range <=> Shared.histyrange;
        linedata <=> Shared.histdata;
    }

    DragArea {
        x: yaxh.x + yaxh.width;
        y: yaxh.y - 2px;
        width: xaxh.width;
        height: yaxh.height + 2px;
    }
}
